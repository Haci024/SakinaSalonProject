// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<string>("ForgetPasswordCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPackets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Discount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Packet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("SessionCount")
                        .HasColumnType("integer");

                    b.Property<int?>("SessionDuration")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("BodyShapingPackets");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingReports", b =>
                {
                    b.Property<int>("PacketId")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentsId")
                        .HasColumnType("integer");

                    b.HasKey("PacketId", "AppointmentsId");

                    b.HasIndex("AppointmentsId");

                    b.ToTable("BodyShapingReports");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingSessionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("BodyShapingSessionLists");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInjection")
                        .HasColumnType("boolean");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("RemaingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ReturnMoney")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("BodyshapingAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("HandDescription")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInjection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ReturnMoney")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("CistkaAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Discount")
                        .HasColumnType("boolean");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("CistkaCategories");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaReports", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CistkaReports");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CosmetologyDescription")
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStart")
                        .HasColumnType("boolean");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("CosmetologyAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Discount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("CosmetologyCategories");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyReport", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CosmetologyReports");
                });

            modelBuilder.Entity("Entity.Concrete.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Female")
                        .HasColumnType("boolean");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("GiveBirthDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("GiveNumber")
                        .HasColumnType("boolean");

                    b.Property<double?>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("double precision")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entity.Concrete.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FilialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Filials");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("HandDescription")
                        .HasColumnType("boolean");

                    b.Property<int>("IncomeId")
                        .HasColumnType("integer");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("HairCutAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Discount")
                        .HasColumnType("boolean");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("HairCutCategories");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategoryReports", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("HairCutCategoryReports");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutItems", b =>
                {
                    b.Property<int?>("StockId")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("IncomeId")
                        .HasColumnType("integer");

                    b.HasKey("StockId", "AppointmentId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("IncomeId");

                    b.ToTable("HairCutItems");
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("IncomeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("Decimal(6,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.HasIndex("StockId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoDate")
                        .HasColumnType("boolean");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("KassaActionCategories");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastOutMoneyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("OutMoneyQuantity")
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FilialId");

                    b.ToTable("KassaActionList");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("EditorName")
                        .HasColumnType("text");

                    b.Property<bool>("EndForSecond")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("HandDescription")
                        .HasColumnType("boolean");

                    b.Property<int>("ImplusCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InCompleteEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("InCompleteStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InjectionDecription")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContiued")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NextSessionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("PriceUpdateDescription")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ReservationForSecond")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartForSecond")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("LazersAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointmentReports", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("LazerCategories");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStart")
                        .HasColumnType("boolean");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("LipuckaAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FilialId")
                        .HasColumnType("integer");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("LipuckaCategories");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("LipuckaReports");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInjection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStart")
                        .HasColumnType("boolean");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("MakeUpAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("MakeUpCategories");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpReports", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MakeUpReports");
                });

            modelBuilder.Entity("Entity.Concrete.Master", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("Entity.Concrete.MasterFilial", b =>
                {
                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.HasKey("MasterId", "FilialId");

                    b.HasIndex("FilialId");

                    b.ToTable("MasterFilials");
                });

            modelBuilder.Entity("Entity.Concrete.MasterPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("PositionId");

                    b.ToTable("MasterPositions");
                });

            modelBuilder.Entity("Entity.Concrete.OutMoney", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("SpendCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.ToTable("OutMoneys");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStart")
                        .HasColumnType("boolean");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("ReturnMoney")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("PirsinqAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("PirsinqCategories");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqReports", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PirsinqReports");
                });

            modelBuilder.Entity("Entity.Concrete.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTimeOut")
                        .HasColumnType("boolean");

                    b.Property<int>("MinuteLimit")
                        .HasColumnType("integer");

                    b.Property<string>("MoneyUpdateDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RemainingMinute")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RemainingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ReturnMoney")
                        .HasColumnType("numeric");

                    b.Property<int>("SolariumCategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsingMinute")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("SolariumCategoriesId");

                    b.ToTable("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("Minute")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("UsingPeriod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SolariumCategories");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumUsingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingMinute")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UsingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsingMinute")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("SolariumUsingLists");
                });

            modelBuilder.Entity("Entity.Concrete.SpendCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("AutoDate")
                        .HasColumnType("boolean");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("SpendCategories");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RemainCount")
                        .HasColumnType("integer");

                    b.Property<int>("SellingCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("TotalCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("AppUser")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPackets", b =>
                {
                    b.HasOne("Entity.Concrete.BodyShapingPackets", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingReports", b =>
                {
                    b.HasOne("Entity.Concrete.BodyshapingAppointment", "BodyshapingAppointments")
                        .WithMany("BodyShapingPacketReports")
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.BodyShapingPackets", "BodyShapingPackets")
                        .WithMany("BodyShapingPacketsReports")
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyShapingPackets");

                    b.Navigation("BodyshapingAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingSessionList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("BodyShapingSessionList")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Entity.Concrete.BodyshapingAppointment", "BodyShapingAppointment")
                        .WithMany("BodyShapingSessionLists")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("BodyShapingAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("BodyshapingAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("BodyshapingAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("BodyShapingAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany("BodyShapingAppointment")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("CistkaAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("CistkaAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("CistkaAppointment")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany("CistkaAppointments")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("CistkaCategory")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.CistkaCategory", "MainCategory")
                        .WithMany("ChildCategoryList")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("Filial");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaReports", b =>
                {
                    b.HasOne("Entity.Concrete.CistkaAppointment", "CistkaAppointment")
                        .WithMany("CistkaReports")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.CistkaCategory", "CistkaCategory")
                        .WithMany("CistkaReports")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CistkaAppointment");

                    b.Navigation("CistkaCategory");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("CosmetologyAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("CosmetologyAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("CosmetologyAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany("CosmetologyAppointment")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyCategory", b =>
                {
                    b.HasOne("Entity.Concrete.CosmetologyCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyReport", b =>
                {
                    b.HasOne("Entity.Concrete.CosmetologyAppointment", "CosmetologyAppointment")
                        .WithMany("CosmetologyReports")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.CosmetologyCategory", "CosmetologyCategory")
                        .WithMany("CosmetologyReports")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CosmetologyAppointment");

                    b.Navigation("CosmetologyCategory");
                });

            modelBuilder.Entity("Entity.Concrete.Customers", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Customers")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("HairCutAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("HairCutAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("HairCutAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany("HairCutAppointments")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("HairCutCategories")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.HairCutCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("Filial");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategoryReports", b =>
                {
                    b.HasOne("Entity.Concrete.HairCutAppointment", "HairCutAppointment")
                        .WithMany("HairCutReport")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.HairCutCategory", "HairCutCategory")
                        .WithMany("HairCutCategoryReports")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HairCutAppointment");

                    b.Navigation("HairCutCategory");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutItems", b =>
                {
                    b.HasOne("Entity.Concrete.HairCutAppointment", "HairCutAppointment")
                        .WithMany("HairCutItems")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Income", null)
                        .WithMany("HairCutItems")
                        .HasForeignKey("IncomeId");

                    b.HasOne("Entity.Concrete.Stock", "Stock")
                        .WithMany("HairCutItems")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HairCutAppointment");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("Incomes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Income")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Stock", "Stock")
                        .WithMany("Incomes")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("KassaActionCategories")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("KassaActions")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.KassaActionCategory", "KassaActionCategory")
                        .WithMany("KassaActionList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("KassaActionList")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");

                    b.Navigation("KassaActionCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointmentReports", b =>
                {
                    b.HasOne("Entity.Concrete.LazerAppointment", "LazerAppointment")
                        .WithMany("LazerAppointmentReports")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerCategory", "LazerCategory")
                        .WithMany("LazerAppointmentReports")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LazerAppointment");

                    b.Navigation("LazerCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LazerCategories")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerCategory", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("Filial");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("LipuckaAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("LipuckaAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LipuckaAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany("LipuckaAppointments")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaCategories", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("LipuckaCategories")
                        .HasForeignKey("FilialId");

                    b.HasOne("Entity.Concrete.LipuckaCategories", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaReports", b =>
                {
                    b.HasOne("Entity.Concrete.LipuckaAppointment", "LipuckaAppointment")
                        .WithMany("LipuckaReports")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LipuckaCategories", "LipuckaCategories")
                        .WithMany("LipuckaReports")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LipuckaAppointment");

                    b.Navigation("LipuckaCategories");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("MakeUpAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("MakeUpAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("MakeUpAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany("MakeUpAppointment")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("MakeUpCategory")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.MakeUpCategory", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("Filial");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpReports", b =>
                {
                    b.HasOne("Entity.Concrete.MakeUpAppointment", "MakeUpAppointment")
                        .WithMany("MakeUpReports")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.MakeUpCategory", "MakeUpCategory")
                        .WithMany("MakeUpReports")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MakeUpAppointment");

                    b.Navigation("MakeUpCategory");
                });

            modelBuilder.Entity("Entity.Concrete.MasterFilial", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("MasterFilial")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany("MasterFilial")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.MasterPosition", b =>
                {
                    b.HasOne("Entity.Concrete.Master", "Masters")
                        .WithMany("MasterPosition")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Position", "Positions")
                        .WithMany("MasterPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Masters");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Entity.Concrete.OutMoney", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("OutMoney")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("OutMoney")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.SpendCategory", "SpendCategory")
                        .WithMany("OutMoney")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");

                    b.Navigation("SpendCategory");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("PirsinqAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("PirsinqAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("PirsinqAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany("PirsinqAppointments")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("PirsinqCategories")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.PirsinqCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("Filial");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqReports", b =>
                {
                    b.HasOne("Entity.Concrete.PirsinqAppointment", "PirsinqAppointment")
                        .WithMany("PirsinqReports")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.PirsinqCategory", "PirsinqCategory")
                        .WithMany("PirsinqReports")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PirsinqAppointment");

                    b.Navigation("PirsinqCategory");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.SolariumCategories", "SolariumCategories")
                        .WithMany("SolariumAppointment")
                        .HasForeignKey("SolariumCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("SolariumCategories");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.HasOne("Entity.Concrete.SolariumCategories", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumUsingList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("SolariumUsingList")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Entity.Concrete.SolariumAppointment", "SolariumAppointment")
                        .WithMany("SolariumUsingList")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.SpendCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("SpendCategory")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("Stocks")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Stock")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.Navigation("BodyShapingSessionList");

                    b.Navigation("BodyshapingAppointments");

                    b.Navigation("CistkaAppointments");

                    b.Navigation("CosmetologyAppointments");

                    b.Navigation("HairCutAppointments");

                    b.Navigation("Incomes");

                    b.Navigation("KassaActions");

                    b.Navigation("LazerAppointments");

                    b.Navigation("LipuckaAppointments");

                    b.Navigation("MakeUpAppointments");

                    b.Navigation("OutMoney");

                    b.Navigation("PirsinqAppointments");

                    b.Navigation("SolariumAppointments");

                    b.Navigation("SolariumUsingList");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPackets", b =>
                {
                    b.Navigation("BodyShapingPacketsReports");

                    b.Navigation("ChildCategory");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.Navigation("BodyShapingPacketReports");

                    b.Navigation("BodyShapingSessionLists");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaAppointment", b =>
                {
                    b.Navigation("CistkaReports");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaCategory", b =>
                {
                    b.Navigation("ChildCategoryList");

                    b.Navigation("CistkaReports");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.Navigation("CosmetologyReports");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyCategory", b =>
                {
                    b.Navigation("ChildCategory");

                    b.Navigation("CosmetologyReports");
                });

            modelBuilder.Entity("Entity.Concrete.Customers", b =>
                {
                    b.Navigation("BodyshapingAppointments");

                    b.Navigation("CistkaAppointments");

                    b.Navigation("CosmetologyAppointments");

                    b.Navigation("HairCutAppointments");

                    b.Navigation("LazerAppointments");

                    b.Navigation("LipuckaAppointments");

                    b.Navigation("MakeUpAppointments");

                    b.Navigation("PirsinqAppointments");

                    b.Navigation("SolariumAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.Filial", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("BodyShapingAppointments");

                    b.Navigation("CistkaAppointment");

                    b.Navigation("CistkaCategory");

                    b.Navigation("CosmetologyAppointments");

                    b.Navigation("Customers");

                    b.Navigation("HairCutAppointments");

                    b.Navigation("HairCutCategories");

                    b.Navigation("Income");

                    b.Navigation("KassaActionCategories");

                    b.Navigation("KassaActionList");

                    b.Navigation("LazerAppointments");

                    b.Navigation("LazerCategories");

                    b.Navigation("LipuckaAppointments");

                    b.Navigation("LipuckaCategories");

                    b.Navigation("MakeUpAppointments");

                    b.Navigation("MakeUpCategory");

                    b.Navigation("MasterFilial");

                    b.Navigation("OutMoney");

                    b.Navigation("PirsinqAppointments");

                    b.Navigation("PirsinqCategories");

                    b.Navigation("SolariumAppointments");

                    b.Navigation("SpendCategory");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutAppointment", b =>
                {
                    b.Navigation("HairCutItems");

                    b.Navigation("HairCutReport");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategory", b =>
                {
                    b.Navigation("ChildCategory");

                    b.Navigation("HairCutCategoryReports");
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.Navigation("HairCutItems");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionCategory", b =>
                {
                    b.Navigation("KassaActionList");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.Navigation("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaAppointment", b =>
                {
                    b.Navigation("LipuckaReports");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaCategories", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("LipuckaReports");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpAppointment", b =>
                {
                    b.Navigation("MakeUpReports");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("MakeUpReports");
                });

            modelBuilder.Entity("Entity.Concrete.Master", b =>
                {
                    b.Navigation("BodyShapingAppointment");

                    b.Navigation("CistkaAppointments");

                    b.Navigation("CosmetologyAppointment");

                    b.Navigation("HairCutAppointments");

                    b.Navigation("LazerAppointments");

                    b.Navigation("LipuckaAppointments");

                    b.Navigation("MakeUpAppointment");

                    b.Navigation("MasterFilial");

                    b.Navigation("MasterPosition");

                    b.Navigation("PirsinqAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqAppointment", b =>
                {
                    b.Navigation("PirsinqReports");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqCategory", b =>
                {
                    b.Navigation("ChildCategory");

                    b.Navigation("PirsinqReports");
                });

            modelBuilder.Entity("Entity.Concrete.Position", b =>
                {
                    b.Navigation("MasterPositions");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.Navigation("SolariumUsingList");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.SpendCategory", b =>
                {
                    b.Navigation("OutMoney");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.Navigation("HairCutItems");

                    b.Navigation("Incomes");
                });
#pragma warning restore 612, 618
        }
    }
}
