// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContext1ModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("ForgetPasswordCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPackets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Discount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Packet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SessionCount")
                        .HasColumnType("int");

                    b.Property<int?>("SessionDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("BodyShapingPackets");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyShapingPacketCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BodyShapingPacketsId")
                        .HasColumnType("int");

                    b.Property<int>("BodyshapingAppointmentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyShapingPacketsId");

                    b.HasIndex("BodyshapingAppointmentsId");

                    b.ToTable("BodyShapingReports");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingSessionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BodyShapingAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BodyShapingAppointmentId");

                    b.ToTable("BodyShapingSessionLists");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInjection")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RemaingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReturnMoney")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("BodyshapingAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("HandDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInjection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("CistkaAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discount")
                        .HasColumnType("bit");

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("CistkaCategories");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CosmetologyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomersId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("CosmetologyAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("CosmetologyCategories");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CosmetologyAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("CosmetologyCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CosmetologyAppointmentId");

                    b.HasIndex("CosmetologyCategoryId");

                    b.ToTable("CosmetologyReports");
                });

            modelBuilder.Entity("Entity.Concrete.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Female")
                        .HasColumnType("bit");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GiveBirthDate")
                        .HasColumnType("bit");

                    b.Property<bool>("GiveNumber")
                        .HasColumnType("bit");

                    b.Property<double?>("PhoneNumber")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entity.Concrete.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filials");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("HandDescription")
                        .HasColumnType("bit");

                    b.Property<int>("IncomeId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("HairCutAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Discount")
                        .HasColumnType("bit");

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<int?>("HairCutAppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("HairCutAppointmentId1")
                        .HasColumnType("int");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("HairCutAppointmentId");

                    b.HasIndex("HairCutAppointmentId1");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("HairCutCategories");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategoryReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HairCutAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("HairCutCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HairCutAppointmentId");

                    b.HasIndex("HairCutCategoryId");

                    b.ToTable("HairCutCategoryReports");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HairCutAppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeId")
                        .HasColumnType("int");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HairCutAppointmentId");

                    b.HasIndex("IncomeId");

                    b.HasIndex("StockId");

                    b.ToTable("HairCutItems");
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IncomeDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StockId")
                        .HasColumnType("bigint");

                    b.Property<int>("StockId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.HasIndex("StockId1");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoDate")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("KassaActionCategories");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastOutMoneyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OutMoneyQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.ToTable("KassaActionList");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<string>("EditorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EndForSecond")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("HandDescription")
                        .HasColumnType("bit");

                    b.Property<int>("ImplusCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InCompleteEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InCompleteStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InjectionDecription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContiued")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextSessionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceUpdateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReservationForSecond")
                        .HasColumnType("bit");

                    b.Property<bool>("StartForSecond")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomersId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("LazersAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointmentReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LazerAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("LazerCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LazerAppointmentId");

                    b.HasIndex("LazerCategoryId");

                    b.ToTable("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("LazerCategories");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("LipuckaAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("LipuckaCategories");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LipuckaAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("LipuckaCategoriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LipuckaAppointmentId");

                    b.HasIndex("LipuckaCategoriesId");

                    b.ToTable("LipuckaReports");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInjection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("MakeUpAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("MakeUpCategories");
                });

            modelBuilder.Entity("Entity.Concrete.Master", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Degree")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("Entity.Concrete.MasterFilial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("MasterFilials");
                });

            modelBuilder.Entity("Entity.Concrete.MasterPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MasterPositions");
                });

            modelBuilder.Entity("Entity.Concrete.OutMoney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SpendCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SpendCategoryId");

                    b.ToTable("OutMoneys");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("MasterId");

                    b.ToTable("PirsinqAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("PirsinqCategories");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PirsinqAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("PirsinqCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PirsinqAppointmentId");

                    b.HasIndex("PirsinqCategoryId");

                    b.ToTable("PirsinqReports");
                });

            modelBuilder.Entity("Entity.Concrete.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTimeOut")
                        .HasColumnType("bit");

                    b.Property<int>("MinuteLimit")
                        .HasColumnType("int");

                    b.Property<string>("MoneyUpdateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RemainingMinute")
                        .HasColumnType("int");

                    b.Property<DateTime>("RemainingTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReturnMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SolariumCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("UsingMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("SolariumCategoriesId");

                    b.ToTable("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UsingPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SolariumCategories");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumUsingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RemainingMinute")
                        .HasColumnType("int");

                    b.Property<int>("SolariumAppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsingMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SolariumAppointmentId");

                    b.ToTable("SolariumUsingLists");
                });

            modelBuilder.Entity("Entity.Concrete.SpendCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoDate")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("SpendCategories");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemainCount")
                        .HasColumnType("int");

                    b.Property<int>("SellingCount")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("AppUser")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPackets", b =>
                {
                    b.HasOne("Entity.Concrete.BodyShapingPackets", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingReports", b =>
                {
                    b.HasOne("Entity.Concrete.BodyShapingPackets", "BodyShapingPackets")
                        .WithMany("BodyShapingPacketsReports")
                        .HasForeignKey("BodyShapingPacketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.BodyshapingAppointment", "BodyshapingAppointments")
                        .WithMany("BodyShapingPacketReports")
                        .HasForeignKey("BodyshapingAppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyShapingPackets");

                    b.Navigation("BodyshapingAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingSessionList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("BodyShapingSessionList")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Entity.Concrete.BodyshapingAppointment", "BodyShapingAppointment")
                        .WithMany("BodyShapingSessionLists")
                        .HasForeignKey("BodyShapingAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("BodyShapingAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("BodyshapingAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customer")
                        .WithMany("BodyshapingAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("BodyShapingAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customer");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany("CistkaAppointments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Entity.Concrete.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("CistkaAppointment")
                        .HasForeignKey("FilialId");

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("CistkaCategory")
                        .HasForeignKey("FilialId");

                    b.HasOne("Entity.Concrete.CistkaCategory", "MainCategory")
                        .WithMany("ChildCategoryList")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("CosmetologyAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("CosmetologyAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyCategory", b =>
                {
                    b.HasOne("Entity.Concrete.CosmetologyCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyReport", b =>
                {
                    b.HasOne("Entity.Concrete.CosmetologyAppointment", "CosmetologyAppointment")
                        .WithMany("CosmetologyReports")
                        .HasForeignKey("CosmetologyAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.CosmetologyCategory", "CosmetologyCategory")
                        .WithMany("CosmetologyReports")
                        .HasForeignKey("CosmetologyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CosmetologyAppointment");

                    b.Navigation("CosmetologyCategory");
                });

            modelBuilder.Entity("Entity.Concrete.Customers", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Customer")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany("HairCutAppointments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Entity.Concrete.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("HairCutAppointments")
                        .HasForeignKey("FilialId");

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("HairCutCategories")
                        .HasForeignKey("FilialId");

                    b.HasOne("Entity.Concrete.HairCutAppointment", null)
                        .WithMany("HairCutCategories")
                        .HasForeignKey("HairCutAppointmentId");

                    b.HasOne("Entity.Concrete.HairCutAppointment", null)
                        .WithMany("HairCutReport")
                        .HasForeignKey("HairCutAppointmentId1");

                    b.HasOne("Entity.Concrete.HairCutCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategoryReports", b =>
                {
                    b.HasOne("Entity.Concrete.HairCutAppointment", "HairCutAppointment")
                        .WithMany()
                        .HasForeignKey("HairCutAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.HairCutCategory", "HairCutCategory")
                        .WithMany()
                        .HasForeignKey("HairCutCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HairCutAppointment");

                    b.Navigation("HairCutCategory");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutItems", b =>
                {
                    b.HasOne("Entity.Concrete.HairCutAppointment", "HairCutAppointment")
                        .WithMany()
                        .HasForeignKey("HairCutAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Income", null)
                        .WithMany("HairCutItems")
                        .HasForeignKey("IncomeId");

                    b.HasOne("Entity.Concrete.Stock", "Stock")
                        .WithMany("HairCutItems")
                        .HasForeignKey("StockId");

                    b.Navigation("HairCutAppointment");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("Incomes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Income")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Stock", "Stock")
                        .WithMany("Incomes")
                        .HasForeignKey("StockId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("KassaActionList")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customers")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointmentReports", b =>
                {
                    b.HasOne("Entity.Concrete.LazerAppointment", "LazerAppointment")
                        .WithMany("LazerAppointmentReports")
                        .HasForeignKey("LazerAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerCategory", "LazerCategory")
                        .WithMany("LazerAppointmentReports")
                        .HasForeignKey("LazerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LazerAppointment");

                    b.Navigation("LazerCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LazerCategories")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerCategory", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("Filial");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LipuckaAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customer");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaCategories", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("LipuckaCategories")
                        .HasForeignKey("FilialId");

                    b.HasOne("Entity.Concrete.LipuckaCategories", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaReports", b =>
                {
                    b.HasOne("Entity.Concrete.LipuckaAppointment", "LipuckaAppointment")
                        .WithMany("LipuckaReports")
                        .HasForeignKey("LipuckaAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LipuckaCategories", "LipuckaCategories")
                        .WithMany()
                        .HasForeignKey("LipuckaCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LipuckaAppointment");

                    b.Navigation("LipuckaCategories");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany("MakeUpAppointments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Entity.Concrete.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("MakeUpAppointments")
                        .HasForeignKey("FilialId");

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("MakeUpCategory")
                        .HasForeignKey("FilialId");

                    b.HasOne("Entity.Concrete.MakeUpCategory", "MainCategory")
                        .WithMany("MakeUpCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.MasterFilial", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("MasteerFilial")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.OutMoney", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("OutMoney")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.SpendCategory", "SpendCategory")
                        .WithMany()
                        .HasForeignKey("SpendCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("SpendCategory");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("PirsinqAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customer");

                    b.Navigation("Filial");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("PirsinqCategories")
                        .HasForeignKey("FilialId");

                    b.HasOne("Entity.Concrete.PirsinqCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqReports", b =>
                {
                    b.HasOne("Entity.Concrete.PirsinqAppointment", "PirsinqAppointment")
                        .WithMany("PirsinqReports")
                        .HasForeignKey("PirsinqAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.PirsinqCategory", "PirsinqCategory")
                        .WithMany("PirsinqReports")
                        .HasForeignKey("PirsinqCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PirsinqAppointment");

                    b.Navigation("PirsinqCategory");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customers", "Customer")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.SolariumCategories", "SolariumCategories")
                        .WithMany("SolariumAppointment")
                        .HasForeignKey("SolariumCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customer");

                    b.Navigation("Filial");

                    b.Navigation("SolariumCategories");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.HasOne("Entity.Concrete.SolariumCategories", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumUsingList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("SolariumUsingList")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Entity.Concrete.SolariumAppointment", "SolariumAppointment")
                        .WithMany("SolariumUsingList")
                        .HasForeignKey("SolariumAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.SpendCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("SpendCategory")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Stock")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.Navigation("BodyShapingSessionList");

                    b.Navigation("BodyshapingAppointments");

                    b.Navigation("CistkaAppointments");

                    b.Navigation("CosmetologyAppointments");

                    b.Navigation("HairCutAppointments");

                    b.Navigation("Incomes");

                    b.Navigation("LazerAppointments");

                    b.Navigation("MakeUpAppointments");

                    b.Navigation("OutMoney");

                    b.Navigation("SolariumAppointments");

                    b.Navigation("SolariumUsingList");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPackets", b =>
                {
                    b.Navigation("BodyShapingPacketsReports");

                    b.Navigation("ChildCategory");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.Navigation("BodyShapingPacketReports");

                    b.Navigation("BodyShapingSessionLists");
                });

            modelBuilder.Entity("Entity.Concrete.CistkaCategory", b =>
                {
                    b.Navigation("ChildCategoryList");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.Navigation("CosmetologyReports");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyCategory", b =>
                {
                    b.Navigation("ChildCategory");

                    b.Navigation("CosmetologyReports");
                });

            modelBuilder.Entity("Entity.Concrete.Customers", b =>
                {
                    b.Navigation("BodyshapingAppointments");

                    b.Navigation("LazerAppointments");

                    b.Navigation("SolariumAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.Filial", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("BodyShapingAppointments");

                    b.Navigation("CistkaAppointment");

                    b.Navigation("CistkaCategory");

                    b.Navigation("CosmetologyAppointments");

                    b.Navigation("Customer");

                    b.Navigation("HairCutAppointments");

                    b.Navigation("HairCutCategories");

                    b.Navigation("Income");

                    b.Navigation("KassaActionList");

                    b.Navigation("LazerAppointments");

                    b.Navigation("LazerCategories");

                    b.Navigation("LipuckaAppointments");

                    b.Navigation("LipuckaCategories");

                    b.Navigation("MakeUpAppointments");

                    b.Navigation("MakeUpCategory");

                    b.Navigation("MasteerFilial");

                    b.Navigation("PirsinqAppointments");

                    b.Navigation("PirsinqCategories");

                    b.Navigation("SolariumAppointments");

                    b.Navigation("SpendCategory");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutAppointment", b =>
                {
                    b.Navigation("HairCutCategories");

                    b.Navigation("HairCutReport");
                });

            modelBuilder.Entity("Entity.Concrete.HairCutCategory", b =>
                {
                    b.Navigation("ChildCategory");
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.Navigation("HairCutItems");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.Navigation("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaAppointment", b =>
                {
                    b.Navigation("LipuckaReports");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaCategories", b =>
                {
                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("Entity.Concrete.MakeUpCategory", b =>
                {
                    b.Navigation("MakeUpCategories");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqAppointment", b =>
                {
                    b.Navigation("PirsinqReports");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqCategory", b =>
                {
                    b.Navigation("ChildCategory");

                    b.Navigation("PirsinqReports");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.Navigation("SolariumUsingList");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.Navigation("HairCutItems");

                    b.Navigation("Incomes");
                });
#pragma warning restore 612, 618
        }
    }
}
